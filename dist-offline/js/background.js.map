{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/background.ts"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA,8BAA8B,YAAY,YAAY,EAAE;AACxD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;AACD;AACA,6BAA6B,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,GAAG;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA,CAAC","file":"background.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/ts/background.ts\");\n","// 隐藏或显示浏览器底部的下载栏\r\nchrome.runtime.onMessage.addListener((data, sender) => {\r\n    if (data.msg === 'setShelfEnabled') {\r\n        chrome.downloads.setShelfEnabled(data.value);\r\n    }\r\n});\r\n// 当点击扩展图标时，显示/隐藏下载面板\r\nchrome.action.onClicked.addListener(function (tab) {\r\n    // 在本程序没有权限的页面上点击扩展图标时，url 始终是 undefined，此时不发送消息\r\n    if (!tab.url) {\r\n        return;\r\n    }\r\n    chrome.tabs.sendMessage(tab.id, {\r\n        msg: 'click_icon',\r\n    });\r\n});\r\n// 当扩展被安装、被更新、或者浏览器升级时，初始化数据\r\nchrome.runtime.onInstalled.addListener(() => {\r\n    chrome.storage.local.set({ batchNo: {}, idList: {} });\r\n});\r\n// 存储每个下载任务的数据，这是因为下载完成的顺序和前台发送的顺序可能不一致，所以需要把数据保存起来以供使用\r\nconst dlData = {};\r\n// 使用每个页面的 tabId 作为索引，储存此页面里当前下载任务的编号。用来判断不同批次的下载\r\nlet batchNo = {};\r\n// 使用每个页面的 tabId 作为索引，储存此页面里所发送的下载请求的作品 id 列表，用来判断重复的任务\r\nlet idList = {};\r\n// batchNo 和 idList 需要持久化存储（但是当浏览器关闭并重新启动时可以清空，因为此时前台的下载任务必然和浏览器关闭之前的不是同一批了，所以旧的数据已经没用了）\r\n// 如果不进行持久化存储，如果前台任务处于下载途中，后台 SW 被回收了，那么变量也会被清除。之后前台传递过来的可能还是同一批下载里的任务，但是后台却丢失了记录。这可能会导致下载出现重复文件等异常。\r\n// 实际上，下载时后台 SW 会持续存在很长时间，不会轻易被回收的。持久化存储只是为了以防万一\r\n// 封装 chrome.storage.local.set。不需要等待回调\r\nasync function setData(data) {\r\n    return chrome.storage.local.set(data);\r\n}\r\nchrome.runtime.onMessage.addListener(async function (msg, sender) {\r\n    // save_work_file 下载作品的文件\r\n    if (msg.msg === 'save_work_file') {\r\n        // 当处于初始状态时，或者变量被回收了，就从存储中读取数据储存在变量中\r\n        // 之后每当要使用这两个数据时，从变量读取，而不是从存储中获得。这样就解决了数据不同步的问题，而且性能更高\r\n        if (Object.keys(batchNo).length === 0) {\r\n            const data = await chrome.storage.local.get(['batchNo', 'idList']);\r\n            batchNo = data.batchNo;\r\n            idList = data.idList;\r\n        }\r\n        const tabId = sender.tab.id;\r\n        // 如果开始了新一批的下载，重设批次编号，并清空下载索引\r\n        if (batchNo[tabId] !== msg.taskBatch) {\r\n            batchNo[tabId] = msg.taskBatch;\r\n            idList[tabId] = [];\r\n            setData({ batchNo, idList });\r\n            // 这里存储数据时不需要使用 await，因为后面使用的是全局变量，所以不需要关心存储数据的同步问题\r\n        }\r\n        // 检查任务是否重复，不重复则下载\r\n        if (!idList[tabId].includes(msg.id)) {\r\n            // 储存该任务的索引\r\n            idList[tabId].push(msg.id);\r\n            setData({ idList });\r\n            // 开始下载\r\n            chrome.downloads.download({\r\n                url: msg.fileUrl,\r\n                filename: msg.fileName,\r\n                conflictAction: 'overwrite',\r\n                saveAs: false,\r\n            }, (id) => {\r\n                // id 是 Chrome 新建立的下载任务的 id\r\n                // 使用下载任务的 id 作为 key 保存数据\r\n                const data = {\r\n                    url: msg.fileUrl,\r\n                    id: msg.id,\r\n                    tabId: tabId,\r\n                    uuid: false,\r\n                };\r\n                dlData[id] = data;\r\n            });\r\n        }\r\n    }\r\n    // save_description_file 下载作品的简介文件，不需要返回下载状态\r\n    // save_novel_cover_file 下载小说的封面图片\r\n    if (msg.msg === 'save_description_file' ||\r\n        msg.msg === 'save_novel_cover_file' ||\r\n        msg.msg === 'save_novel_embedded_image') {\r\n        chrome.downloads.download({\r\n            url: msg.fileUrl,\r\n            filename: msg.fileName,\r\n            conflictAction: 'overwrite',\r\n            saveAs: false,\r\n        });\r\n    }\r\n});\r\n// 判断文件名是否变成了 UUID 格式。因为文件名处于整个绝对路径的中间，所以没加首尾标记 ^ $\r\nconst UUIDRegexp = /[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}/;\r\n// 监听下载变化事件\r\n// 每个下载会触发两次 onChanged 事件\r\nchrome.downloads.onChanged.addListener(async function (detail) {\r\n    // 根据 detail.id 取出保存的数据\r\n    const data = dlData[detail.id];\r\n    if (data) {\r\n        let msg = '';\r\n        let err = '';\r\n        // 判断当前文件名是否正常。下载时必定会有一次 detail.filename.current 有值\r\n        if (detail.filename && detail.filename.current) {\r\n            const changedName = detail.filename.current;\r\n            if (changedName.match(UUIDRegexp) !== null) {\r\n                // 文件名是 UUID\r\n                data.uuid = true;\r\n            }\r\n        }\r\n        if (detail.state && detail.state.current === 'complete') {\r\n            msg = 'downloaded';\r\n        }\r\n        if (detail.error && detail.error.current) {\r\n            msg = 'download_err';\r\n            err = detail.error.current;\r\n            // 当保存一个文件出错时，从任务记录列表里删除它，以便前台重试下载\r\n            const idIndex = idList[data.tabId].findIndex((val) => val === data.id);\r\n            idList[data.tabId][idIndex] = '';\r\n            setData({ idList });\r\n        }\r\n        // 返回信息\r\n        if (msg) {\r\n            chrome.tabs.sendMessage(data.tabId, { msg, data, err });\r\n            // 清除这个任务的数据\r\n            dlData[detail.id] = null;\r\n        }\r\n    }\r\n});\r\n// 清除不需要的数据，避免数据体积越来越大\r\nasync function clearData() {\r\n    for (const key of Object.keys(idList)) {\r\n        const tabId = parseInt(key);\r\n        try {\r\n            await chrome.tabs.get(tabId);\r\n        }\r\n        catch (error) {\r\n            // 如果建立下载任务的标签页已经不存在，则会触发错误，如：\r\n            // Unchecked runtime.lastError: No tab with id: 1943988409.\r\n            // 此时删除对应的数据\r\n            delete idList[tabId];\r\n            delete batchNo[tabId];\r\n        }\r\n    }\r\n    setData({ batchNo, idList });\r\n}\r\nsetInterval(() => {\r\n    clearData();\r\n}, 60000);\r\n"],"sourceRoot":""}